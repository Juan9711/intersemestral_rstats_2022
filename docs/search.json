{
  "articles": [
    {
      "path": "about.html",
      "title": "Acerca de este sitio",
      "description": "Este curso fue organizado por Psycoding, una organización conformada por estudiantes de pregrado, egresados, académicos y otros interesados en la programación. Operamos en la Facultad de Psicología de la UNAM, campus Ciudad Universitaria. Buscamos fomentar la educación tecnológica y la inclusión de la programación en la Psicología y la ciencia en general. Nuestros miembros manejan principalmente los siguientes lenguajes de programación: Python, R y Arduino. Las actividades de nuestra comunidad se centran en el desarrollo y aprendizaje de los principios de estos lenguajes, sin embargo, nos consideramos un grupo inclusivo que admite en su comunidad a quienes manejan otros lenguajes. Lo que nos une es nuestro gusto e interés por el bello mundo de la programación.",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2021-12-13T02:32:46+00:00"
    },
    {
      "path": "Aritmetica_y_operaciones.html",
      "title": "Aritmética y operaciones lógicas en R",
      "author": [
        {
          "name": "Scarlett Escudero",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nObjetos\nUn objeto es un nombre/una unidad que puede utilizar para recuperar los datos almacenados o tareas almacenadas. Por ejemplo, puede guardar datos en un objeto como a o b.\nPara crear un objeto R, elija un nombre y luego use el símbolo menor que, <, seguido de un signo menos, -, para guardar los datos en él. Esta combinación parece una flecha hacia la izquierda <-\nPuede nombrar un objeto en R casi cualquier cosa que desee, pero hay algunas reglas: * No puede comenzar con un número * No puede usar algunos símbolos especiales, como ^, !, $, @, +, -, /, , :  No puede llevar espacios * De preferencia no usar el nombre de funciones preexistentes en R, como pi\nNota: R sobrescribirá cualquier información previa almacenada en un objeto sin pedirle permiso. Por lo tanto, es una buena idea no usar nombres que ya están en uso, a menos que eso es algo que tú quieras.\n\n\na <- 5\na\nb <- 6\nb\n#Observen cómo se van creando los objetos/variables en el environment\n#texto_1 <- Este es un texto\ntexto_1 <- \"Este es un texto\"\ntexto_1 <- 'Este también es un texto'\n\n#cadena_num <- 1,2,3,4,5\ncadena_num <- c(1,2,3,4,5)\ncadena_text <- c(\"Hola\", \"Qué tal\", 'Todo bien', '     Qué bueno')\n\nx <- 15\nx <- 55\nx\n\n\n\nAritmética en R\nAdición\n\nSustracción\n\nMultiplicación\n\n/ División\n^ Exponente\n\n\n1 + 2 - (3 * 4 / 5) ^ 6\noperacion <- (1 + 2) - (3 * 4) / 5  #Igual lo pueden hacer directamente en la consola\n\na+b\nc <- a + b\n#variable <- texto_1 + a\n#c_text <- \"a\"+\"b\"\nnumeros <- c(\"1\", \"2\", \"3\")\n\n\n\nTarea rápida: \nTarea “larga”: \n\n\nedad <- c(22, 23, 22, 20, 18, 21, 25, 22, 20, 20, 22, 19)\nestatura <- c(164, 160, 155, 173, 168, 185, 158, 187, 165, 160, 156, 179)\npeso <- c(59, 60, 88, 92, 77, 62, 68, 95, 63, 72, 95, 66)\nestatura <- estatura/100\nIMC <- peso/estatura^2\n\n\n\nOperaciones lógicas\n!= No Igual\n== Igual\n< Menor que\n\nMayor que\n\n<= Menor que o igual\n\n= Mayor que o igual\n\n& (and)\n(or)\n! no\n\n\nx <- 0.5\n0 < x \nx > 10\nx <= .0005\n\nx <- 1:3\ny <- 1:3\nz <- c(0,1,2)\nz <- c(1,2,5)\n\nx == y\nx == z\nx != z\n\nverdadero <- T\nverdadero == F\n\n\n\n\n\n\n",
      "last_modified": "2021-12-13T02:32:47+00:00"
    },
    {
      "path": "comandos_basicos.html",
      "title": "1.2 Comandos básicos",
      "description": "Comandos básicos, interfaz de R-studio y ambiente\n",
      "author": [
        {
          "name": "Emma Botello",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n¿Qué es R?\nUn lenguaje y un entorno de programación que dispone de:\nAlmacenamiento y manipulación de datos.\nOperadores para cálculo.\nHerramientas para análisis de datos.\nPosibilidades gráficas para análisis de datos.\nCabe aclarar que R no está propiamente diseñado como sistema estadístico, sino que es un entorno en el cual se han implementado muchas técnicas estadísticas.\nEl código de R está disponible como software gratuito y de libre acceso, el cual continuamente es mejorado por personas en todo el mundo que colaboran para su desarrollo.\nPara acceder a la consola de R, busca el siguiente símbolo en tu menú de aplicaciones: \nUna vez que se ha abierto, ubica el prompt (>). Este símbolo indica que R está a la espera de tus órdenes. Si escribes instrucciones frente al prompt y das enter, R las ejecutará, siempre y cuando uses el lenguaje específico que R requiere. Por ejemplo, escribe:\n\n\ndate()\n\n\n[1] \"Mon Dec 13 02:32:47 2021\"\n\n¿Qué es RStudio?\nUn entorno amigable diseñado para R que permite realizar los procedimientos de manera más sencilla e intuitiva.\nVentajas de RStudio\nPermite:\nResaltar la sintaxis.\nAutocompletar el código.\nAdministrar fácilmente múltiples directorios de trabajo usando proyectos.\nHacer diagnóstico de errores.\n\nPuedes abrirlo ubicando el siguiente símbolo en tu menú de aplicaciones: \nUna vez que has abierto RStudio, puedes personalizar el color de fondo y el color con el que se resalta la sintaxis. Para esto debes ubicar la opción Tools y dar click en Global Options. Se abrirá una ventana con múltiples opciones, entre ellas la opción Appearance. Aquí podrás seleccionar un tema para tu editor, además de cambiar el tipo y tamaño de tu letra.\nPara que observes como RStudio autocompleta el código, ubica la consola (busca el prompt >), escribe dat y observa que sucede.\nRStudio te ofrece sugerencias de funciones que inician con las letras que estás escribiendo, como la función data(). Usando las flechas de tu teclado puedes navegar entre las distintas opciones que te ofrece R. Navega entre las opciones hasta encontrar la función date(), una vez que hayas encontrado esta función usa la tecla Tab o tabuladora para autocompletar la función.\nAhora, intenta hacer lo mismo en R directamente. Como podrás notar, R no te ofrece sugerencias al escribir. Puedes forzar a R a hacer esto dando doble click en la tecla Tab, sin embargo tienes la desventaja de que solo te da el nombre de las funciones y tú tienes que completar las letras que te falten, lo cual no es un problema con la función data(), pues falta solo una letra, pero tomaría un poco más de tiempo escribir la función data.frame(). RStudio optimiza nuestro tiempo al autocompletar el código.\nRStudio, además, te permite tener proyectos por separado donde estés trabajando con código para distintos propósitos. ¡Vamos a abrir un proyecto para este curso! Ubica la esquina superior derecha de tu RStudio, si das click sobre Project: None observarás lo siguiente: \nSelecciona New Project, te aparecerá esta ventana: \nPuedes generar una nueva carpeta (o directorio) con “New Directory”, esto si no tienes alguna designada en tu computadora para el curso. Si ya habías creado una carpeta con anterioridad, da click en “Existing Directory”.\nAl seleccionar “New Directory” te dará varias opciones, vuelve a seleccionar “New Directory”. Se abrirá una ventana como la siguiente:\nNombrar proyectoDeberás darle un nombre a tu carpeta y explorar (browse) los directorios existentes de tu computadora para seleccionar la ubicación donde se guardará la nueva carpeta del proyecto. Cuando programes, procura no nombrar carpetas y archivos usando caracteres especiales (ej. acentos, ñ, +, *, /, @, #…), caracteres gráficos (ej. ♣, ♦, ♥, ♠…) o espacios. Para este curso, sugerimos el nombre de carpeta: inter_RStats_2022. Una vez nombrada la carpeta y seleccionada la ubicación, da click en “Create Project”. ¡Listo! Ahora RStudio debería ubicarte en automático en ese proyecto.\nProyectos\nMantenienen un ambiente de trabajo ordenado pues permiten:\nConcentrar todos los archivos asociados a un proyecto en una sola ubicación.\nSeparar claramente un proyecto de otros en los que se estén trabajando.\nMantener los resultados del código que se ejecutó anteriormente (environment).\nConservar un directorio de trabajo estable.\nUn directorio de trabajo (Working Directory) es la carpeta en la cual RStudio busca los archivos que se le solicita leer y donde colocará los archivos que se le pida que guarde. RStudio muestra el WD actual en la parte superior de la consola (ej.~/Documents/inter_RStats_2022/). Puedes conocer tu WD actual usando el comando:\n\n\ngetwd()\n\n\n\nPáneles en RStudio\nComo habrás observado desde que abriste R, tiene múltiples páneles además de la consola. Seguramente, por ahora ves solo 3, similar a lo siguiente:\nPaneles sin editorVamos a hacer que se muestren los 4 páneles principales de RStudio, de la siguiente forma: \nPara abrir el editor de código, crearemos un script. Da click en el siguiente ícono: \nCada panel cumple funciones distintas, las cuales describiremos a continuación de manera breve.\n##Consola de R Permite que se ejecuten las instrucciones que escribimos para R. Al igual que el panel anterior, permite que el código se autocomplete (a diferencia de la consola de R que vimos fuera de RStudio). Cuenta con un símbolo de escoba que nos permite limpiar lo que hay en la consola, lo cual también puede hacerse con las teclas Ctrl + L o Cmd + L Además, cuando R aún está ejecutando nuestras instrucciones, muestra un símbolo para interrumpir la ejecución. Para observar esto, vamos a ejecutar la siguiente instrucción:\n\n\nwhile(1 < 2) {\n  print(\"Presiona el botón de STOP para detener\")\n}\n\n\n\nAdemás del botón STOP, también podemos presionar la tecla Esc en nuestro teclado para parar la ejecución.\nEditor de código fuente y visor de datos\nEditor\nPermite generar documentos en los cuáles se almacenen todos los comandos de código que serán ejecutados posteriormente. Al escribir en ellos R no seguirá automáticamente las instrucciones que estamos dando. Cuenta, además, con resaltado de sintaxis y detección de posibles errores. Por ejemplo, en el script que abriste escribe lo siguiente:\nx y <-10\nComo puedes observar, RStudio resalta el número 10 en un color distinto y, además, junto al número de línea marca un tache, indicando que la línea contiene errores.\nTipos de documentos comúnmente usados:\nR Script. Documentos de texto plano para almacenar código. Su extensión es .R\nR Markdown. Documento que permite combinar el código, sus resultados y comentarios en prosa. Además, tiene diferentes formatos de salida (PDF, word, presentaciones, etc.). Su extensión es .Rmd\nAquí un par de links donde consultar más sobre R Markdown:\nGuía de referencia de R Markdown\nCheat Sheet de R Markdown\nEn ambos tipos de documentos, las líneas del documento están numeradas y las instrucciones escritas pueden ejecutarse al ubicar el cursor en una línea particular. La ejecución puede hacerse con las teclas Ctrl + enter (para usuarios de Windows) o Cmd + enter (para usuarios de Linux/macOs), o bien, también usando el botón Run ubicado en la parte superior derecha del panel de edición.\nAlgunos atajos de teclado para edición de código\nCtrl + shift + R Genera una sección en el script y marca un indice (también se pone con más de 5 guiones).\nShift + flechas de teclado permite seleccionar varias líneas.\nCtrl + enter Ejecuta la linea en la cual te encuentras posicionado o las líneas seleccionadas.\nAlt + shift + flecha hacia abajo Genera una copia de la línea actual en el siguiente renglón.\nAlt + flecha arriba/abajo Mueve la línea de código actual.\nCtrl + alt + flecha arriba/abajo Permite duplicar el cursor y editar varias líneas a la vez (para dejar de duplicar se presiona esc).\nCtrl + shift + C Comenta varias líneas seleccionadas.\nVisor\nCuando abrimos un conjunto de datos en R, la visualización se lleva a cabo en el mismo panel que se encuentra el editor. Por ejemplo, usando la función View() vamos a abrir el visor usando un conjunto de datos que viene por defecto en R. Ejecuta la siguiente línea de código:\nView(mtcars)\nEspacio de trabajo : Ambiente\nContiene la ventana de ambiente, donde se irán registrando los objetos que vayamos creando. Tenemos la opción de cargar y guardar una sesión de trabajo, importar datos y limpiar los objetos de la sesión.\nObjetos\nPueden ser valores numéricos, vectores, funciones, bases de datos, gráficos, etc. Los objetos en R se crean de la siguiente forma:  La imágen muestra (de izquierda a derecha):\nUn objeto a crear, con un nombre que nosotros definimos arbitrariamente.\nEl símbolo asignador, que expresa que todo lo que se encuentre a la derecha de la flecha se guardará en el objeto creado. Puede ser <- o =\nLa función, que en este caso permite leer archivos de Excel.\nLos argumentos se indican dentro de los paréntesis. En particular, el primer argumento indica la información a leer (archivo de excel), el segundo argumento indica la hoja del archivo a leer y el tercer argumento indica que columnas se leerán de forma específica (en este caso las primeras 10).\n\nComo iremos viendo a lo largo del curso, luego del asignador las funciones son solo un tipo de información que podemos incluir. Podemos, por ejemplo, guardar números en objetos:\n\n\nnumero <- 10\n\n\n\nAl ejecutar el código anterior, puedes notar que en tu ventana Environment ahora aparece registrado el objeto numero. Para acceder al contenido de los objetos, podemos simplemente escribir su nombre en nuestra consola:\n\n\nnumero\n\n\n[1] 10\n\nSe puede modificar el contenido de un objeto cambiando lo que se encuentre a la derecha del símbolo <-\n\n\nnumero <-5\n\n\n\n\n\nnumero\n\n\n[1] 5\n\nAlgunas consideraciones al generar objetos\nLos nombres de los objetos:\nDeben comenzar con una letra (no número)\nPueden contener letras, números, guiones bajos y puntos.\nNo deben contener espacios ni caracteres especiales (acentos, barras, comillas, guión medio, paréntesis, diagonal etc.).\nDeben ser descriptivos.\nNo se tienen que repetir.\nEjemplos:\nyo_uso_guion_bajo\nOtraGenteUsaMayusculas\nalgunas.personas.usan.puntos\nY_algunasPocas.Personas_RENIEGANdelasconvenciones ### Algunas funciones útiles para el ambiente de trabajo\n\nPara ver que objetos están en el Environment podemos usar:\n\n\nls()\n\n\n [1] \"a\"           \"b\"           \"c\"           \"cadena_num\" \n [5] \"cadena_text\" \"edad\"        \"estatura\"    \"IMC\"        \n [9] \"numero\"      \"numeros\"     \"operacion\"   \"peso\"       \n[13] \"texto_1\"     \"verdadero\"   \"x\"           \"y\"          \n[17] \"z\"          \n\n\n\nobjects()\n\n\n [1] \"a\"           \"b\"           \"c\"           \"cadena_num\" \n [5] \"cadena_text\" \"edad\"        \"estatura\"    \"IMC\"        \n [9] \"numero\"      \"numeros\"     \"operacion\"   \"peso\"       \n[13] \"texto_1\"     \"verdadero\"   \"x\"           \"y\"          \n[17] \"z\"          \n\nPara remover un objeto en específico:\n\n\nrm(numero)\n\n\n\nPara eliminar todo el contenido del Environment:\n\n\nrm(list = ls())\n\n\n\nEspacio de trabajo : Historial\nEl panel History muestra un historial de las líneas de código que se han ejecutado en la consola. Al hacer doble click sobre alguna línea el código se copia a la consola para que se pueda volver a ejecutar la operación. También se puede acceder a líneas de código pasadas colocando el cursor en la consola y presionando la tecla con la flecha hacia arriba.\nFicheros/files\nEn este espacio aparecen los archivos que están en el directorio de trabajo. Permite renombrarlos, eliminarlos, copiarlos, moverlos o generar nuevas carpetas y archivos sin necesidad de salir de RStudio.\nPlots\nEn este panel se visualizan los gráficos generados. La función básica para generar gráficos es plot()\n\n\nplot(mtcars)\n\n\n\n\nTambién se pueden visualizar los gráficos usando la función x11() en Windows o quartz() en Linux/MacOS. Se pueden cerrar usando dev.off()\nPara windows:\n\n\nx11()\nplot(mtcars)\ndev.off()\n\n\n\nPara Linux/MacOS:\n\n\nquartz()\nplot(mtcars)\ndev.off()\n\n\n\nPackages\nPermite visualizar las librerías que hay actualmente en el disco duro de la máquina, cargarlas para su uso, gestionar la instalación de nuevas librerías o la actualización de las ya descargadas.\nLas librerías desarrolladas en R cubren multitud de campos: desde estadística descriptiva e inferencial, aplicaciones Bayesianas, financieras, métodos gráficos, machine learning, creación de aplicaciones web, etc.\nPara incluir librerias adicionales a las que vienen por default, se usa la función install.packages(“nombre del paquete”). Cabe resaltar que esta función tendremos que usarla sólo una vez.\nCuando tenemos una libreria adicional instalada y queremos cargar sus funciones a nuestro Environment usamos la función library(“nombre del paquete”). Esta linea debe ejecutarse cada vez que se vaya a usar la función en una sesión nueva.\nHelp\nEn este panel podemos obtener ayuda sobre una determinada función o librería. Por ejemplo, si quisieramos saber qué hace la función date() podríamos escribir su nombre en el espacio que se encuentra junto a la lupa o escribir estas líneas en nuestra consola:\nhelp(date) ?date\n\n\n\n",
      "last_modified": "2021-12-13T02:32:48+00:00"
    },
    {
      "path": "comparativa_entre_poblaciones.html",
      "title": "3.5 Comparativa entre poblaciones",
      "description": "Principales pruebas estadísticas para la comparativa entre poblaciones\n",
      "author": [
        {
          "name": "Azalea Reyes-Aguilar",
          "url": {}
        },
        {
          "name": "Azalea Reyes-Aguilar",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\n\n\n",
      "last_modified": "2021-12-13T02:32:48+00:00"
    },
    {
      "path": "estructura_de_datos.html",
      "title": "2.2 Estructura de datos",
      "description": "Estructura de datos orientada a objetos o tabulación de datos\n",
      "author": [
        {
          "name": "Ana Gonzalez",
          "url": {}
        },
        {
          "name": "Edgar Morales",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nEstructura de datos en R\nLas estructuras de datos en R pueden entenderse con base en las dimensiónes que soportan y los datos que pueden contener. Es importante conocerlas con el fin de determinar cual de ellas podemos útilizar y como podemos procesar información de ellas.\n\n\n\n",
      "last_modified": "2021-12-13T02:32:48+00:00"
    },
    {
      "path": "index.html",
      "title": "R Intersemestral 2022",
      "description": "Bienvenido al curso Intersemestral de Rstat 2022\n",
      "author": [],
      "contents": "\nPonentes\nDra. Azalea Reyes\nPsic. Emma Botello\nPsic. Juan Díaz\nPsic. Ana González\nPsic. Scarlett Escudero\nBiol. Edgar Morales\nDinámica del curso\nHoras síncronas: Se impartirá, del 13 al 17 de diciembre de 2021 en un horario de 16:00 a 20:00 horas. En estas sesiones se revisará el temario del curso.\nHoras asíncronas: Tiempo dedicado por los participantes para la instalación del software y para el desarrollo de sus proyectos de análisis de datos.\nTemario del curso\nIntroducción a la programación y a R\n1.1 Configuración R y R-studio y lógica de programación\n1.2 Comandos básicos, interfaz de R-studio, ambiente\nOperadores y estructuras de datos en R\n2.1 Aritmética y operaciones lógicas en R\n2.2 Estructura de datos orientada a objetos o tabulación de datos\nProgramación de análisis de datos con R\n3.1 Manejo de variables y visualización de datos\n3.2 Estadística descriptiva en R: moda, media, mediana, desviación estándar, etc.\n3.3 Supuestos de estadística paramétrica vs. no-paramétrica\n3.4 Correlación y regresión lineal\n3.5 Comparativa entre poblaciones\nProyecto de análisis de datos\n4.1 Planeación y desarrollo del proyecto\n4.2 Presentación de proyectos\n\n",
      "last_modified": "2021-12-13T02:32:49+00:00"
    },
    {
      "path": "parametrica.html",
      "title": "3.3 Supuestos de estadística paramétrica vs. no-paramétrica",
      "description": "Supuestos de la estadística paramétrica y no paramétrica con ejemplos\n",
      "author": [
        {
          "name": "Azalea Reyes-Aguilar",
          "url": {}
        },
        {
          "name": "Azalea Reyes-Aguilar",
          "url": {}
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\n\n\n",
      "last_modified": "2021-12-13T02:32:49+00:00"
    }
  ],
  "collections": []
}
